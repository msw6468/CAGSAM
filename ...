# pip install numpy pandas colorful prettytable tqdm pudb ipython
# --- default packages --- #
import os, sys
from glob import glob
import argparse

# for visualization
import colorful
from pprint import pprint
from prettytable import PrettyTable
from tqdm import tqdm
import cv2

# for data and models
import numpy as np
import pandas as pd

from utils import save_overlapped_mask, overlay_mask_on_image
# --- default packages --- #

# --- customized packages --- #
# --- customized packages --- #

def parse_args():
    parser = argparse.ArgumentParser()
    paa = parser.add_argument
    # common arguments
    paa("--debug",       '-d', action='store_true', help="debug mode?")
    paa("--verobse",     '-v', action='store_true', help="verbose mode?")
    paa("--random_seed", '-r', default=2,           help="random seed for experiments")
    return parser.parse_args()

def main(args):
    df = pd.read_csv('data/FineARCADE/data_info.csv', index_col=0)
    df = df[df['split']=='test']
    for i in range(len(df)):
        image_path = df['image_filename'].iloc[i]
        mask_path = df['mask_filename'].iloc[i]
        main_mask_path = df['main_mask_filename'].iloc[i]
        fine_mask_path = df['fine_mask_filename'].iloc[i]
        image = cv2.imread(image_path)
        mask = cv2.imread(mask_path) * 255
        main_mask = cv2.imread(main_mask_path) * 255
        fine_mask = cv2.imread(fine_mask_path) * 255
        save_path = f'{image_path.split("/")[-2]}_{image_path.split("/")[-1]}'
        concat_img = np.concatenate([image, 
                                     overlay_mask_on_image(image=image, mask=mask), 
                                     overlay_mask_on_image(image=image, mask=main_mask), 
                                     overlay_mask_on_image(image=image, mask=fine_mask)], 
                                     axis=1)
        cv2.imwrite(f"{save_path}", np.uint8(concat_img))


        from IPython import embed; embed(colors='neutral')  # XXX DEBUG  # yapf: disable

    pass

if __name__ == '__main__':
    args = parse_args()
    main(args)
    print(colorful.bold_pink('Thank you and Good Job Computer.').styled_string)